-- Create the challenges table
CREATE TABLE
  challenges (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT NOT NULL,
    icon TEXT NOT NULL,
    features TEXT[] NOT NULL DEFAULT '{}',
    featured BOOLEAN NOT NULL DEFAULT FALSE,
    difficulty TEXT NOT NULL,
    category TEXT NOT NULL,
    points INTEGER NOT NULL DEFAULT 10,
    flag TEXT,
    url TEXT
  );

-- Create the solved_challenges table
CREATE TABLE
  solved_challenges (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users (id),
    challenge_id TEXT NOT NULL REFERENCES challenges (id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (user_id, challenge_id)
  );

-- Create the leaderboard view
CREATE OR REPLACE VIEW
  leaderboard AS
SELECT
  u.id AS user_id,
  COALESCE(u.raw_user_meta_data ->> 'full_name', u.raw_user_meta_data ->> 'user_name', 'Anonymous') AS username,
  COUNT(sc.challenge_id) AS solved_challenges,
  COALESCE(SUM(c.points), 0) AS total_points,
  RANK() OVER (
    ORDER BY
      COALESCE(SUM(c.points), 0) DESC
  ) AS rank
FROM
  auth.users u
  LEFT JOIN solved_challenges sc ON u.id = sc.user_id
  LEFT JOIN challenges c ON sc.challenge_id = c.id
GROUP BY
  u.id
ORDER BY
  total_points DESC;

-- Enable Row Level Security (RLS)
ALTER TABLE challenges ENABLE ROW LEVEL SECURITY;
ALTER TABLE solved_challenges ENABLE ROW LEVEL SECURITY;

-- Policies for challenges table
DROP POLICY IF EXISTS "Allow public read access to challenges" ON challenges;
CREATE POLICY "Allow public read access to challenges" ON challenges FOR
SELECT
  USING (TRUE);

DROP POLICY IF EXISTS "Allow admin full access to challenges" ON challenges;
CREATE POLICY "Allow admin full access to challenges" ON challenges FOR ALL USING (
  auth.email () = 'frostfoe@gmail.com'
)
WITH
  CHECK (auth.email () = 'frostfoe@gmail.com');

-- Policies for solved_challenges table
DROP POLICY IF EXISTS "Allow users to read their own solved challenges" ON solved_challenges;
CREATE POLICY "Allow users to read their own solved challenges" ON solved_challenges FOR
SELECT
  USING (auth.uid () = user_id);

DROP POLICY IF EXISTS "Allow users to insert their own solved challenges" ON solved_challenges;
CREATE POLICY "Allow users to insert their own solved challenges" ON solved_challenges FOR INSERT
WITH
  CHECK (auth.uid () = user_id);

DROP POLICY IF EXISTS "Allow admin full access to solved_challenges" ON solved_challenges;
CREATE POLICY "Allow admin full access to solved_challenges" ON solved_challenges FOR ALL USING (
  auth.email () = 'frostfoe@gmail.com'
)
WITH
  CHECK (auth.email () = 'frostfoe@gmail.com');
